# -*- coding: utf-8 -*-
##############################################################################
## Skype Robot Daemon
##############################################################################
import os
import sys
import getopt
import time
import datetime
import logging
import requests
import threading
import gettext
import shutil
import json
import ssl
import asyncio
##############################################################################
import urllib
import urllib   . parse
from   urllib                              import parse
##############################################################################
from   pathlib                             import Path
##############################################################################
import mysql . connector
from   mysql . connector                   import Error
##############################################################################
from   http  . server                      import HTTPServer
from   http  . server                      import BaseHTTPRequestHandler
from   http  . server                      import ThreadingHTTPServer
##############################################################################
from   skpy                                import Skype
from   skpy  . event                       import SkypeEvent
##############################################################################
## Skype Robot Watcher
##############################################################################
class ImsWatcher              ( BaseHTTPRequestHandler                     ) :
  ############################################################################
  ## 檢查帳號密碼
  ############################################################################
  def isAuthorized            ( self                                       ) :
    ##########################################################################
    if                        ( self . Robot == None                       ) :
      return False
    ##########################################################################
    Username = self . Robot . HttpUsername
    Password = self . Robot . HttpPassword
    ##########################################################################
    if                        ( len ( Password ) <= 0                      ) :
      return True
    ##########################################################################
    if                        ( len ( Username ) <= 0                      ) :
      return True
    ##########################################################################
    USER     = self . headers [ "Username"                                   ]
    PASS     = self . headers [ "Password"                                   ]
    ##########################################################################
    if                        ( USER != Username                           ) :
      return False
    ##########################################################################
    if                        ( PASS != Password                           ) :
      return False
    ##########################################################################
    return True
  ############################################################################
  ## 發送回應
  ############################################################################
  def SendResponse       ( self , Answer , Response                        ) :
    ##########################################################################
    ## Send the html header
    ##########################################################################
    self . send_response ( Answer                                            )
    self . send_header   ( 'Content-type' , 'application/json'               )
    self . end_headers   (                                                   )
    ##########################################################################
    ## Send the html message
    ##########################################################################
    self . wfile . write ( bytes ( str ( Response ) , encoding = "utf8" )    )
    ##########################################################################
    return
  ############################################################################
  ## Silence output message
  ############################################################################
  def log_message                 ( self , format , *args                  ) :
    ##########################################################################
    try                                                                      :
      ########################################################################
      MSG = format % args
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    self . server . Robot . debug ( MSG , "debug"                            )
    ##########################################################################
    return
  ############################################################################
  ## Output error message
  ############################################################################
  def log_error                                  ( self , format , *args   ) :
    ##########################################################################
    ADDR     = self . address_string             (                           )
    ERRMSG   = ""
    ##########################################################################
    try                                                                      :
      ERRMSG = format % args
    except                                                                   :
      pass
    ##########################################################################
    self     . server . Robot . PossibleIntruder ( ADDR , ERRMSG             )
    ##########################################################################
    return
  ############################################################################
  ## Handler for the GET requests
  ############################################################################
  def do_GET                  ( self                                       ) :
    return self . Handling    ( False                                        )
  ############################################################################
  ## Handler for the GET requests
  ############################################################################
  def do_POST                 ( self                                       ) :
    return self . Handling    ( True                                         )
  ############################################################################
  ## 處理命令輸入
  ############################################################################
  def Handling                  ( self , posting                           ) :
    ##########################################################################
    self . Robot = self . server . Robot
    ##########################################################################
    if                          ( self . Robot == None                     ) :
      self . SendResponse       ( 401 , { }                                  )
      return
    ##########################################################################
    uri      = parse . urlparse ( self . path                                )
    JSON     = { }
    Response = { }
    Answer   = 200
    ##########################################################################
    if                          ( posting                                  ) :
      contentLength = int       ( self . headers [ 'Content-Length' ]        )
      if                        ( contentLength > 0                        ) :
        ######################################################################
        try                                                                  :
          body = self . rfile . read ( contentLength                         )
          body = body . decode  ( "utf-8"                                    )
          JSON = json . loads   ( body                                       )
        except ValueError                                                    :
          Answer = 400
        ######################################################################
    else                                                                     :
      par    = parse . parse_qs ( uri . query                                )
      if                        ( len ( par ) > 0                          ) :
        pKeys = par . keys      (                                            )
        for k in pKeys                                                       :
          JSON [ k ] = par [ k ] [ 0 ]
    ##########################################################################
    ## Check Account
    ##########################################################################
    if                          ( not self . isAuthorized ( )              ) :
      Answer = 401
    ##########################################################################
    if                          ( Answer == 200                            ) :
      ########################################################################
      Dispatched = self . Dispatch ( uri . path , self . headers , JSON      )
      ########################################################################
      Response   = Dispatched [ "Response" ]
      Answer     = Dispatched [ "Answer"   ]
    ##########################################################################
    self . SendResponse       ( Answer , Response                            )
    ##########################################################################
    return
  ############################################################################
  def Dispatch                ( self , Path , Headers , JSON               ) :
    ##########################################################################
    if                        ( "/Message" == Path                         ) :
      return self . DoMessage ( JSON                                         )
    ##########################################################################
    if                        ( "/System" == Path                          ) :
      return self . DoSystem  ( JSON                                         )
    ##########################################################################
    if                      ( self . Robot . HttpPlugin != None            ) :
      return self . Robot . HttpPlugin ( Path , Headers , JSON               )
    ##########################################################################
    return { "Answer" : 200 , "Response" : { "Answer" : "Yes" }              }
  ############################################################################
  def DoMessage             ( self , JSON                                  ) :
    ##########################################################################
    if                      ( self . Robot != None                         ) :
      self . Robot . append ( JSON                                           )
    ##########################################################################
    return { "Answer" : 200 , "Response" : { "Answer": "Yes" } }
  ############################################################################
  def DoSystem                  ( self , JSON                              ) :
    ##########################################################################
    Action = JSON               [ "Action"                                   ]
    Action = Action . lower     (                                            )
    ##########################################################################
    if                          ( Action == "threads"                      ) :
      ########################################################################
      TotalThreads   = threading . active_count (                            )
      ########################################################################
      return                    { "Answer"    : 202                        , \
                                  "Response"  :                            { \
                                    "Threads" : TotalThreads               , \
                                    "Answer"  : "Yes" }                      }
    ##########################################################################
    if                          ( self . Robot != None                     ) :
      ########################################################################
      if                        ( Action == "stop"                         ) :
        ######################################################################
        threading . Thread      ( target = self . Robot . Shutdown         ) \
                  . start       (                                            )
      ########################################################################
      elif                      ( Action == "finish"                       ) :
        self . Robot . Shutdown (                                            )
      ########################################################################
      elif                      ( Action == "Resend"                       ) :
        self . Robot . Resend   (                                            )
      ########################################################################
      elif                      ( Action == "Counts"                       ) :
        ######################################################################
        REMAINs = len           ( self . Robot . Queues                      )
        FAILs   = len           ( self . Robot . Failures                    )
        ######################################################################
        return                  { "Answer"     : 202                       , \
                                  "Response"   :                           { \
                                    "Queues"   : REMAINs                   , \
                                    "Failures" : FAILs                     , \
                                    "Answer"   : "Yes" }                     }
    ##########################################################################
    return                      { "Answer"   : 200                         , \
                                  "Response" : { "Answer": "Yes" }           }
##############################################################################
## Skype Robot Daemon
##############################################################################
class ImsRobot   (                                                         ) :
  ############################################################################
  def __init__   ( self                                                      ,
                   Username = ""                                             ,
                   Password = ""                                             ,
                   Account  = ""                                             ,
                   Options  = {                                          } ) :
    ##########################################################################
    self . ImsLocker        = threading . Lock (                             )
    self . EpsLocker        = threading . Lock (                             )
    self . FailLocker       = threading . Lock (                             )
    ##########################################################################
    self . IMS              = None
    self . Watcher          = None
    self . Port             = 8101
    self . HttpUsername     = ""
    self . HttpPassword     = ""
    self . DebugLogger      = None
    self . Running          = False
    self . HttpStep         = 0
    self . Queues           = [                                              ]
    self . Failures         = [                                              ]
    self . MaxFailures      = 1000
    self . WaitStep         = 0
    self . WaitMoment       = datetime . datetime . now (                    )
    self . Account          = Account
    self . Username         = Username
    self . Password         = Password
    self . Reply            = None
    self . SendTo           = None
    self . HttpPlugin       = None
    self . SentSuccess      = None
    self . SentFailure      = None
    self . FailureHandler   = None
    self . IntruderHandler  = None
    ##########################################################################
    self . SetOptions         ( Options                                      )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    return
  ############################################################################
  def SetOptions ( self , Options                                          ) :
    return
  ############################################################################
  def PossibleIntruder     ( self , IpAddress , ErrorMessage               ) :
    ##########################################################################
    if                     ( self . IntruderHandler in [ False , None ]    ) :
      return
    ##########################################################################
    self . IntruderHandler ( IpAddress , ErrorMessage , "ImsRobot"           )
    ##########################################################################
    return
  ############################################################################
  def debug                        ( self , message , way = "info"         ) :
    ##########################################################################
    Logger   = self . DebugLogger
    ##########################################################################
    if                             ( Logger == None                        ) :
      return
    ##########################################################################
    if                             ( way == "debug"                        ) :
      Logger . debug               ( message                                 )
    elif                           ( way == "info"                         ) :
      Logger . info                ( message                                 )
    ##########################################################################
    return
  ############################################################################
  def lock                     ( self                                      ) :
    self . ImsLocker . acquire (                                             )
    return
  ############################################################################
  def release                  ( self                                      ) :
    self . ImsLocker . release (                                             )
    return
  ############################################################################
  def count             ( self                                             ) :
    ##########################################################################
    self  . lock        (                                                    )
    COUNT = len         ( self . Queues                                      )
    self  . release     (                                                    )
    ##########################################################################
    return COUNT
  ############################################################################
  def append                  ( self , JSON                                ) :
    ##########################################################################
    self    . lock            (                                              )
    self    . Queues . append ( JSON                                         )
    self    . release         (                                              )
    ##########################################################################
    ACCOUNT = JSON            [ "Account"                                    ]
    BEAU    = JSON            [ "Beau"                                       ]
    ##########################################################################
    MSG     = f"Queue {ACCOUNT} Message for {BEAU}"
    self    . debug           ( MSG                                          )
    ##########################################################################
    return
  ############################################################################
  def first                ( self                                          ) :
    ##########################################################################
    BODY   = None
    self   . lock          (                                                 )
    if                     ( len ( self . Queues ) > 0                     ) :
      BODY = self . Queues [ 0                                               ]
      del    self . Queues [ 0                                               ]
    self   . release       (                                                 )
    ##########################################################################
    return BODY
  ############################################################################
  def FailureBody                  ( self , BODY                           ) :
    ##########################################################################
    if ( self . FailureHandler not in [ False , None ]                     ) :
      ########################################################################
      OKAY = self . FailureHandler (        BODY                             )
      ########################################################################
      if                           ( not OKAY                              ) :
        return
    ##########################################################################
    self . FailLocker . acquire    (                                         )
    ##########################################################################
    TOTAL  = len                  ( self . Failures                          )
    ##########################################################################
    if                            ( TOTAL > self  . MaxFailures            ) :
      ########################################################################
      HALF = int                  ( self  . MaxFailures / 2                  )
      LIST = self . Failures      [ - HALF :                                 ]
      self . Failures = LIST
    ##########################################################################
    self . Failures   . append     (        BODY                             )
    ##########################################################################
    self . FailLocker . release    (                                         )
    ##########################################################################
    return
  ############################################################################
  def send                 ( self , BODY                                   ) :
    ##########################################################################
    ACCOUNT  = BODY        [ "Account"                                       ]
    BEAU     = BODY        [ "Beau"                                          ]
    MESSAGE  = BODY        [ "Message"                                       ]
    ##########################################################################
    if                     ( len ( ACCOUNT ) <= 0                          ) :
      return False
    ##########################################################################
    if                     ( len ( MESSAGE ) <= 0                          ) :
      return False
    ##########################################################################
    try                                                                      :
      ########################################################################
      MSG    = f"Send Message to {ACCOUNT} for {BEAU}"
      self   . debug       ( MSG                                             )
      ########################################################################
      CH     = self . IMS . contacts [ ACCOUNT ] . chat
      CH     . sendMsg     ( MESSAGE , me = False , rich = True              )
      ########################################################################
      MSG    = f"Sent Message to {ACCOUNT} for {BEAU} Success"
      self   . debug       ( MSG                                             )
      ########################################################################
      if                   ( self . SendTo not in [ False , None ]         ) :
        self . SendTo      ( ACCOUNT , BEAU , MESSAGE                        )
      ########################################################################
      if                   ( self . SentSuccess not in [ False , None ]    ) :
        self . SentSuccess ( ACCOUNT                                         )
      ########################################################################
    except                                                                   :
      ########################################################################
      self   . FailureBody ( BODY                                            )
      ########################################################################
      MSG    = f"Failure to Send Message to {ACCOUNT} for {BEAU}"
      self   . debug       ( MSG                                             )
      ########################################################################
      if                   ( self . SentFailure not in [ False , None ]    ) :
        self . SentFailure ( ACCOUNT                                         )
    ##########################################################################
    return True
  ############################################################################
  def Resend                      ( self                                   ) :
    ##########################################################################
    self . lock                 (                                            )
    ##########################################################################
    self . FailLocker . acquire (                                            )
    ##########################################################################
    A    = self . Queues
    B    = self . Failures
    A    . extend               ( B                                          )
    ##########################################################################
    self . Queues   = A
    self . Failures =           [                                            ]
    ##########################################################################
    self . FailLocker . release (                                            )
    self . release              (                                            )
    ##########################################################################
    return
  ############################################################################
  def Incoming                    ( self , account , content               ) :
    ##########################################################################
    MSG  = f"Reply Message from {account}"
    self . debug                  ( MSG                                      )
    ##########################################################################
    if                            ( self . Reply == None                   ) :
      return
    ##########################################################################
    self . Reply                  (        account , "Reply" , content       )
    ##########################################################################
    return
  ############################################################################
  def EventHandler                 ( self                                  ) :
    ##########################################################################
    MSG        = "Watching Skype Incoming Messages"
    self       . debug             ( MSG                                     )
    ##########################################################################
    while                          ( self . Running                        ) :
      ########################################################################
      time     . sleep             ( 0.1                                     )
      ########################################################################
      if                           ( self . IMS == None                    ) :
        continue
      ########################################################################
      if                           ( not self . Running                    ) :
        continue
      ########################################################################
      if                           ( not self . IMS . conn . connected     ) :
        continue
      ########################################################################
      Events   =                   [                                         ]
      try                                                                    :
        ######################################################################
        self   . WaitStep   = 1
        self   . WaitMoment = datetime . datetime . now (                    )
        ######################################################################
        Events = self . IMS . getEvents (                                    )
        ######################################################################
        self   . WaitStep   = 0
        ######################################################################
      except                                                                 :
        ######################################################################
        self   . WaitStep   = 0
        ######################################################################
        continue
      ########################################################################
      if                           ( not self . Running                    ) :
        continue
      ########################################################################
      if                           ( len ( Events ) <= 0                   ) :
        continue
      ########################################################################
      self . EpsLocker . acquire   (                                         )
      ########################################################################
      try                                                                    :
        ######################################################################
        for E in Events                                                      :
          ####################################################################
          if                       ( not self . Running                    ) :
            continue
          ####################################################################
          if   ( type ( E ) . __name__ == "SkypeNewMessageEvent"           ) :
            ##################################################################
            ID        = E . msg . user . id
            ##################################################################
            if                     ( ID != self . Account                  ) :
              ################################################################
              CONTENT = E . msg . content
              self    . Incoming   ( ID , CONTENT                            )
        ######################################################################
      except                                                                 :
        pass
      finally                                                                :
        self . EpsLocker . release (                                         )
    ##########################################################################
    return True
  ############################################################################
  def Monitor                     ( self                                   ) :
    ##########################################################################
    self           . Running = True
    ##########################################################################
    threading      . Thread       ( target = self . EventHandler ) . start ( )
    ##########################################################################
    TotalThreads   = threading . active_count (                              )
    ##########################################################################
    MSG            = f"Current Threads : {TotalThreads}"
    self           . debug        ( MSG                                      )
    ##########################################################################
    while                         ( self . Running                         ) :
      ########################################################################
      time         . sleep        ( 0.1                                      )
      ########################################################################
      if                          ( self . IMS == None                     ) :
        ######################################################################
        self       . lock         (                                          )
        try                                                                  :
          ####################################################################
          Username = self . Username
          Password = self . Password
          MSG      = f"Trying to login Skype Service Account : {Username}"
          self     . debug        ( MSG                                      )
          self     . IMS = Skype  ( Username , Password                      )
          self     . IMS . setPresence  (                                    )
          MSG      = f"Login Skype Service Account {Username} Successfully"
          self     . debug        ( MSG                                      )
          ####################################################################
        except                                                               :
          ####################################################################
          self     . IMS       = None
          Username = self . Username
          MSG      = f"Failure to login Skype Service Account {Username}"
          self     . debug        ( MSG                                      )
          time     . sleep        ( 1                                        )
          ####################################################################
        finally                                                              :
          self     . release      (                                          )
        ######################################################################
        continue
      ########################################################################
      if                          ( not self . Running                     ) :
        continue
      ########################################################################
      if                          ( not self . IMS . conn . connected      ) :
        ######################################################################
        Username   = self . Username
        self . IMS = None
        self . debug              ( f"Skype for {Username} disconnected"     )
        ######################################################################
        continue
      ########################################################################
      if                          ( not self . Running                     ) :
        continue
      ########################################################################
      CNT          = self . count (                                          )
      if                          ( CNT <= 0                               ) :
        continue
      ########################################################################
      if                          ( not self . Running                     ) :
        continue
      ########################################################################
      BODY         = self . first (                                          )
      if                          ( BODY == None                           ) :
        continue
      ########################################################################
      threading . Thread          ( target = self . send                     ,
                                    args   = ( BODY , )                    ) \
                . start           (                                          )
    ##########################################################################
    return True
  ############################################################################
  def StartHttpd                         ( self                            ) :
    ##########################################################################
    MPORT           = str                 ( self . Port                      )
    MSG             = f"Skype Robot Controller is binded to 0.0.0.0:{MPORT}"
    IP              =                     ( "0.0.0.0" , self . Port          )
    self . HttpStep = 1
    self . Watcher  = ThreadingHTTPServer ( IP , ImsWatcher                  )
    ##########################################################################
    self . Watcher  . Robot = self
    self . debug                          ( MSG                              )
    self . HttpStep = 2
    ##########################################################################
    self . Watcher  . serve_forever       (                                  )
    ## self . Watcher  . server_close        (                                  )
    self . Watcher  = None
    ##########################################################################
    self . HttpStep = 3
    MSG             = f"Skype Robot Controller stopped"
    self . debug                          ( MSG                              )
    ##########################################################################
    return
  ############################################################################
  def StopHttpd                     ( self                                 ) :
    ##########################################################################
    if                              ( self . Watcher == None               ) :
      return False
    ##########################################################################
    try                                                                      :
      self . Watcher . shutdown     (                                        )
    except                                                                   :
      return False
    ##########################################################################
    return True
  ############################################################################
  def Shutdown           ( self                                            ) :
    ##########################################################################
    MSG      = "Skype Robot is Stopping, please wait for a moment"
    self     . debug     ( MSG                                               )
    ##########################################################################
    self     . Running = False
    self     . StopHttpd (                                                   )
    ##########################################################################
    while                ( self . HttpStep in [ 1 , 2 ]                    ) :
      time   . sleep     ( 0.05                                              )
    ##########################################################################
    if                   ( self . WaitStep in [ 1 ]                        ) :
      ########################################################################
      DTS    = self . WaitMoment . strftime ( "%Y/%m/%d %H:%M:%S"            )
      MSG    = f"Lastest watching moment : {DTS}"
      self   . debug     ( MSG                                               )
      ########################################################################
      while              ( self . WaitStep in [ 1 ]                        ) :
        time . sleep     ( 0.05                                              )
    ##########################################################################
    MSG      = "Skype Robot stopped completely"
    self     . debug     ( MSG                                               )
    ##########################################################################
    return True
  ############################################################################
  def Start               ( self                                           ) :
    ##########################################################################
    threading . Thread    ( target = self . StartHttpd           ) . start ( )
    ##########################################################################
    return self . Monitor (                                                  )
  ############################################################################
  def StartThreads        ( self                                           ) :
    ##########################################################################
    threading . Thread    ( target = self . StartHttpd           ) . start ( )
    threading . Thread    ( target = self . Monitor              ) . start ( )
    ##########################################################################
    return True
  ############################################################################
  def SendMessage     ( self , Host , JSON                                 ) :
    ##########################################################################
    CMD        = f"{Host}/Message"
    Headers    = { "Username" : self . HttpUsername                          ,
                   "Password" : self . HttpPassword                          }
    try                                                                      :
      requests . post ( CMD                                                  ,
                        data    = json . dumps ( JSON )                      ,
                        headers = Headers                                    )
    except                                                                   :
      return False
    ##########################################################################
    return True
  ############################################################################
  def StopRobot       ( self , Host                                        ) :
    ##########################################################################
    CMD        = f"{Host}/System"
    Headers    = { "Username" : self . HttpUsername                          ,
                   "Password" : self . HttpPassword                          }
    JSON       = { "Action" : "Stop"                                         }
    try                                                                      :
      requests . post ( CMD                                                  ,
                        data    = json . dumps ( JSON )                      ,
                        headers = Headers                                    )
    except                                                                   :
      return False
    ##########################################################################
    return   True
  ############################################################################
  def FinishRobot     ( self , Host                                        ) :
    ##########################################################################
    CMD        = f"{Host}/System"
    Headers    = { "Username" : self . HttpUsername                          ,
                   "Password" : self . HttpPassword                          }
    JSON       = { "Action" : "Finish"                                       }
    try                                                                      :
      requests . post ( CMD                                                  ,
                        data    = json . dumps ( JSON )                      ,
                        headers = Headers                                    )
    except                                                                   :
      return False
    ##########################################################################
    return   True
  ############################################################################
  def AskToResend     ( self , Host                                        ) :
    ##########################################################################
    CMD        = f"{Host}/System"
    Headers    = { "Username" : self . HttpUsername                          ,
                   "Password" : self . HttpPassword                          }
    JSON       = { "Action" : "Resend"                                       }
    try                                                                      :
      requests . post ( CMD                                                  ,
                        data    = json . dumps ( JSON )                      ,
                        headers = Headers                                    )
    except                                                                   :
      return False
    ##########################################################################
    return   True
  ############################################################################
  def GetThreads              ( self , Host                                ) :
    ##########################################################################
    CMD     = f"{Host}/System"
    Headers = { "Username" : self . HttpUsername                             ,
                "Password" : self . HttpPassword                             }
    JSON    = { "Action" : "Threads"                                         }
    try                                                                      :
      r     = requests . post ( CMD                                          ,
                                data    = json . dumps ( JSON )              ,
                                headers = Headers                            )
    except                                                                   :
      return 0
    ##########################################################################
    if                        ( r . status_code != 202                     ) :
      return 0
    ##########################################################################
    T       = r . text
    T       = T . replace     ( "'" , "\""                                   )
    if                        ( len ( T ) <= 0                             ) :
      return 0
    ##########################################################################
    try                                                                      :
      J     = json . loads    ( T                                            )
    except                                                                   :
      return 0
    ##########################################################################
    if                        ( "Threads" not in J                         ) :
       return 0
    ##########################################################################
    return J                  [ "Threads"                                    ]
  ############################################################################
  def GetCounts               ( self , Host                                ) :
    ##########################################################################
    CMD     = f"{Host}/System"
    Headers = { "Username" : self . HttpUsername                             ,
                "Password" : self . HttpPassword                             }
    JSON    = { "Action" : "Counts"                                          }
    try                                                                      :
      r     = requests . post ( CMD                                          ,
                                data    = json . dumps ( JSON )              ,
                                headers = Headers                            )
    except                                                                   :
      return                  {                                              }
    ##########################################################################
    if                        ( r . status_code != 202                     ) :
      return                  {                                              }
    ##########################################################################
    T       = r . text
    T       = T . replace     ( "'" , "\""                                   )
    if                        ( len ( T ) <= 0                             ) :
      return                  {                                              }
    ##########################################################################
    try                                                                      :
      J     = json . loads    ( T                                            )
    except                                                                   :
      return                  {                                              }
    ##########################################################################
    return J
  ############################################################################
  def Restore                ( self , Filename                             ) :
    ##########################################################################
    if                       ( not os . path . isfile ( Filename )         ) :
      return
    ##########################################################################
    TEXT     = ""
    try                                                                      :
      with open              ( Filename , "rb" ) as f                        :
        TEXT = f . read      (                                               )
    except                                                                   :
      return
    ##########################################################################
    if                       ( len ( TEXT ) <= 0                           ) :
      return
    ##########################################################################
    try                                                                      :
      BODY   = TEXT . decode ( "utf-8"                                       )
    except                                                                   :
      return
    ##########################################################################
    if                       ( len ( BODY ) <= 0                           ) :
      return
    ##########################################################################
    try                                                                      :
      J      = json . loads  ( BODY                                          )
    except                                                                   :
      return
    ##########################################################################
    self     . Queues = J
    ##########################################################################
    E        =               [                                               ]
    try                                                                      :
      ########################################################################
      with     open          ( Filename , 'w' , encoding = 'utf-8' ) as f    :
        json . dump          ( E , f , ensure_ascii = False , indent = 4     )
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    return
  ############################################################################
  def StoreQueues   ( self , Filename , Events                             ) :
    ##########################################################################
    if              ( len ( Events ) <= 0                                  ) :
      return
    ##########################################################################
    try                                                                      :
      ########################################################################
      with     open ( Filename , 'w' , encoding = 'utf-8' ) as f             :
        json . dump ( Events                                               , \
                      f                                                    , \
                      ensure_ascii = False                                 , \
                      indent       = 4                                       )
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    return
  ############################################################################
  def Rescue           ( self , Filename                                   ) :
    ##########################################################################
    self . StoreQueues ( Filename , self . Failures                          )
    ##########################################################################
    return
  ############################################################################
  def StoreRemains     ( self , Filename                                   ) :
    ##########################################################################
    self . StoreQueues ( Filename , self . Queues                            )
    ##########################################################################
    return
  ############################################################################
  def StoreBoth        ( self , Filename                                   ) :
    ##########################################################################
    A    = self . Queues
    B    = self . Failures
    ##########################################################################
    A    . extend      ( B                                                   )
    ##########################################################################
    self . StoreQueues ( Filename , A                                        )
    ##########################################################################
    return
##############################################################################
